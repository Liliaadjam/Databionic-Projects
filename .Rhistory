remotes::install_github("Mthrun/AdaptGauss")
load("C:/Users/turbo/Desktop/Project1_Abgabe/Project1.RData")
installed.packages("C:\\Users\\turbo\\Downloads\\DatabionicSwarm_2.0.0.tar.gz")
install.packages("C:\\Users\\turbo\\Downloads\\DatabionicSwarm_2.0.0.tar.gz")
install.packages("ABCanalysis")
install.packages("C:\\Users\\turbo\\Downloads\\DatabionicSwarm_2.0.0.tar.gz")
load("C:/Users/turbo/Desktop/Project1_Abgabe/Project1.RData")
setwd("C:/Users/turbo/Downloads")
x <- ReadLRN("WisconsinDiagnosis.lrn")[2][[1]]
y <- ReadCLS("WisconsinDiagnosis.cls")[2][[1]]
library(dbt.DataIO)
library(AdaptLGT)
library(AdaptGauss)
library(caret)
library(Classifiers)
require(FCPS)
require(neuralnet)
require(DataVisualizations)
set.seed(123)
x <- ReadLRN("WisconsinDiagnosis.lrn")[2][[1]]
y <- ReadCLS("WisconsinDiagnosis.cls")[2][[1]]
# Scale the features
preProcValues <- preProcess(as.data.frame(x), method = c("center", "scale"))
x_scaled <- predict(preProcValues, as.data.frame(x))
# Combine x_scaled and y into a single data frame
dataset <- cbind(x_scaled, Diagnosis = as.factor(y))
# Function to train and evaluate the model
evaluate_model <- function(data, n_iterations = 100) {
accuracies <- numeric(n_iterations)
precision_vals <- numeric(n_iterations)
recall_vals <- numeric(n_iterations)
f1_scores <- numeric(n_iterations)
for (i in 1:n_iterations) {
set.seed(123 + i) # Ensure reproducibility with a different seed each iteration
splitIndex <- createDataPartition(data$Diagnosis, p = 0.8, list = FALSE, times = 1)
trainData <- data[splitIndex,]
testData <- data[-splitIndex,]
# Define the formula for neural network training
formula <- as.formula(paste("Diagnosis ~", paste(names(trainData)[-ncol(trainData)], collapse = " + ")))
# Train the neural network
model <- neuralnet(formula, data = trainData, hidden = c(5, 3), linear.output = FALSE)
# Predict on test data
predictions <- neuralnet::compute(model, testData[, -ncol(testData)])$net.result
# Determine predicted classes from probabilities
predicted_classes <- apply(predictions, 1, function(row) ifelse(row[1] > row[2], 1, 2))
# Ensure lengths match
if (length(predicted_classes) == nrow(testData)) {
predicted_classes <- as.factor(predicted_classes)
actual_classes <- as.factor(testData$Diagnosis)
# Calculate accuracy
accuracies[i] <- sum(predicted_classes == actual_classes) / nrow(testData)
# Confusion matrix
conf_matrix <- table(Predicted = predicted_classes, Actual = actual_classes)
# Calculate precision, recall, and F1-score
tp <- conf_matrix[2, 2]
tn <- conf_matrix[1, 1]
fp <- conf_matrix[2, 1]
fn <- conf_matrix[1, 2]
precision_vals[i] <- tp / (tp + fp)
recall_vals[i] <- tp / (tp + fn)
f1_scores[i] <- 2 * (precision_vals[i] * recall_vals[i]) / (precision_vals[i] + recall_vals[i])
} else {
accuracies[i] <- NA
precision_vals[i] <- NA
recall_vals[i] <- NA
f1_scores[i] <- NA
}
}
results <- list(
accuracies = accuracies,
mean_accuracy = mean(accuracies, na.rm = TRUE),
sd_accuracy = sd(accuracies, na.rm = TRUE),
mean_precision = mean(precision_vals, na.rm = TRUE),
mean_recall = mean(recall_vals, na.rm = TRUE),
mean_f1_score = mean(f1_scores, na.rm = TRUE)
)
return(results)
}
# Run the evaluation 100 times
set.seed(123)
resultstask2 <- evaluate_model(dataset, 100)
# Print the results
print(paste("Mean Accuracy:", resultstask2$mean_accuracy))
print(paste("Standard Deviation of Accuracy:", resultstask2$sd_accuracy))
print(paste("Mean Precision:", resultstask2$mean_precision))
print(paste("Mean Recall:", resultstask2$mean_recall))
print(paste("Mean F1-Score:", resultstask2$mean_f1_score))
setwd("C:/Users/turbo/Desktop/Project2_Abgabe")
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- dbt.DataIO::ReadLRN("iris.lrn")
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("iris.lrn")
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("abc.lrn")
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("abc.lrn")
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("abc.lrn")
crabs_data <- ReadLRN("1974Crabs.lrn")
crabs_sex <- ReadCLS("1974Crabs_sex.cls")
crabs_sp <- ReadCLS("1974Crabs_sp.cls")
# Robust Normalization
iris_pp <- RobustNormalization(iris_data$Data)
crabs_pp <- RobustNormalization(crabs_data$Data[,2:6])
index <- 1:length(crabs_data$Data[,1])
crabs_pp <- cbind(index, crabs_pp)
#Signed Log
iris_sl <- SignedLog(iris_data$Data)
crabs_sl <- SignedLog(crabs_data$Data)
# z-transformation
iris_z <- scale(iris_data$Data)
crabs_z <- scale(crabs_data$Data)
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("iris.lrn")
iris_cls <- ReadCLS(iris.cls
)
iris_cls <- ReadCLS("iris.cls")
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("iris.lrn")
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("iris.lrn")
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("abc.lrn")
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("iris.lrn")
iris_cls <- ReadCLS("iris.cls")
crabs_data <- ReadLRN("1974Crabs.lrn")
crabs_sex <- ReadCLS("1974Crabs_sex.cls")
crabs_sp <- ReadCLS("1974Crabs_sp.cls")
# Robust Normalization
iris_pp <- RobustNormalization(iris_data$Data)
crabs_pp <- RobustNormalization(crabs_data$Data[,2:6])
index <- 1:length(crabs_data$Data[,1])
crabs_pp <- cbind(index, crabs_pp)
#Signed Log
iris_sl <- SignedLog(iris_data$Data)
crabs_sl <- SignedLog(crabs_data$Data)
# z-transformation
iris_z <- scale(iris_data$Data)
crabs_z <- scale(crabs_data$Data)
library(dplyr)
df <- as.data.frame(crabs_pp)
# Schmelze das Data Frame für ggplot2
library(reshape2)
df_melted <- melt(df, variable.name = "Column")
# Erstelle eine Funktion zur Berechnung der Dichte
calc_density <- function(x) {
d <- density(x)
data.frame(x = d$x, y = d$y)
}
# Berechne die Dichte für jede Spalte
densities <- df_melted %>%
group_by(Column) %>%
do(calc_density(.$value))
# Erstelle den Plot
ggplot(densities, aes(x = x, y = y, color = Column)) +
geom_line() +
scale_x_continuous(limits = c(-2,2))
library(Umatrix)
iris_esom <- esomTrain(iris_sl, Key = 1:nrow(iris_sl))
plotMatrix(iris_esom$Umatrix, iris_esom$BestMatches, iris_solution$Cls)
knitr::opts_chunk$set(echo = TRUE)
library(dbt.DataIO)
library(DataVisualizations)
library(ggplot2)
library(reshape2)
iris_data <- ReadLRN("iris.lrn")
iris_solution <- ReadCLS("iris.cls")
crabs_data <- ReadLRN("1974Crabs.lrn")
crabs_sex <- ReadCLS("1974Crabs_sex.cls")
crabs_sp <- ReadCLS("1974Crabs_sp.cls")
# Robust Normalization
iris_pp <- RobustNormalization(iris_data$Data)
crabs_pp <- RobustNormalization(crabs_data$Data[,2:6])
index <- 1:length(crabs_data$Data[,1])
crabs_pp <- cbind(index, crabs_pp)
#Signed Log
iris_sl <- SignedLog(iris_data$Data)
crabs_sl <- SignedLog(crabs_data$Data)
# z-transformation
iris_z <- scale(iris_data$Data)
crabs_z <- scale(crabs_data$Data)
library(Umatrix)
iris_esom <- esomTrain(iris_sl, Key = 1:nrow(iris_sl))
plotMatrix(iris_esom$Umatrix, iris_esom$BestMatches, iris_solution$Cls)
library(DatabionicSwarm)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_data,iris_solution)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
install.packages("parallelDist")
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
GeneratePswarmVisualization(iris_pswarm)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
GeneratePswarmVisualization(iris_sl,iris_pswarm)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints)
plotMatrix(s)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
s <- GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
s <- GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints)
plotMatrix(s)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
s <- GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints)
plotMatrix(s$Umatrix)
iris_pmatrix <- pmatrixForEsom(iris_sl, iris_esom$Weights, iris_esom$Lines, iris_esom$Columns, iris_esom$Toroid)
plotMatrix(iris_pmatrix, ColorStyle = "Pmatrix")
iris_ustar <- CalcUstarmatrix(iris_esom$Umatrix, iris_pmatrix)
iris_ustar <- GeneralizedUmatrix::CalcUstarmatrix(iris_esom$Umatrix, iris_pmatrix)
plotMatrix(iris_ustar, iris_esom$BestMatches, iris_solution$Cls)
```{r, echo = F, eval = T}
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
s <- GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints)
plotMatrix(s$Umatrix)
DBSclustering(2,iris_sl,iris_pswarm)
DBSclustering(2,iris_sl,s)
DBSclustering(2,iris_sl,s$Bestmatches)
DBSclustering(2,iris_sl,s$Bestmatches,c(2,1))
DBSclustering(2,iris_sl,s$Bestmatches,c(200,100))
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
s <- GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints,cls = iris_solution)
plotMatrix(s$Umatrix)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
s <- GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints,cls = iris_solution$Cls)
plotMatrix(s$Umatrix)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
s <- GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints,cls = iris_solution$Cls)
plotMatrix(s$Umatrix, cls = iris_solution$Cls)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
s <- GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints,cls = iris_solution$Cls)
plotMatrix(s$Umatrix, Cls = iris_solution$Cls)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl,iris_solution)
s <- GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints,cls = iris_solution$Cls)
plotMatrix(s$Umatrix,s$Bestmatches, Cls = iris_solution$Cls)
DBSclustering(2,iris_sl,s$Bestmatches,iris_pswarm$ColumnsLines)
DBSclustering(2,iris_sl,s$Bestmatches,c(s$Columns,s$Lines))
DBSclustering(2,iris_sl,s$Bestmatches,c(s$Lines,s$Lines))
DBSclustering(2,iris_sl,s$Bestmatches,c(s$Lines,s$Columns))
dbs <- DBSclustering(2,iris_sl,s$Bestmatches,c(s$Lines,s$Columns))
plotMatrix()
dbs <- DBSclustering(2,iris_sl,s$Bestmatches,c(s$Lines,s$Columns))
dbs <- DBSclustering(2,iris_sl,s$Bestmatches,c(s$Lines,s$Columns))
plotMatrix(iris_sl,s$Bestmatches,dbs)
dbs <- DBSclustering(2,iris_sl,s$Bestmatches,c(s$Lines,s$Columns))
plotMatrix(iris_sl,s$Bestmatches,Cls = dbs)
dbs <- DBSclustering(3,iris_sl,s$Bestmatches,c(s$Lines,s$Columns))
plotMatrix(iris_sl,s$Bestmatches,Cls = dbs)
dbs <- DBSclustering(3,iris_sl,s$Bestmatches,c(s$Lines,s$Columns))
plotMatrix(s,s$Bestmatches,Cls = dbs)
dbs <- DBSclustering(3,iris_sl,s$Bestmatches,c(s$Lines,s$Columns))
plotMatrix(s$Umatrix,s$Bestmatches,Cls = dbs)
crabs_esom <- esomTrain(crabs_pp, Key = 1:nrow(crabs_sl))
plotMatrix(crabs_esom$Umatrix, crabs_esom$BestMatches, crabs_sex$Cls)
plotMatrix(crabs_esom$Umatrix, crabs_esom$BestMatches, crabs_sp$Cls)
crabs_pmatrix <- pmatrixForEsom(crabs_pp, crabs_esom$Weights, crabs_esom$Lines, crabs_esom$Columns, crabs_esom$Toroid)
plotMatrix(crabs_pmatrix, ColorStyle = "Pmatrix")
crabs_ustar <- CalcUstarmatrix(crabs_esom$Umatrix, crabs_pmatrix)
crabs_ustar <- GeneralizedUmatrix::CalcUstarmatrix(crabs_esom$Umatrix, crabs_pmatrix)
plotMatrix(crabs_ustar, crabs_esom$BestMatches, crabs_sp$Cls)
crabs_pswarm <- Pswarm(crabs_pp,crabs_sex)
crabs_s <- GeneralizedUmatrix::GeneralizedUmatrix(crabs_pp,crabs_pswarm$ProjectedPoints,cls = crabs_sex$Cls)
plotMatrix(crabs_s$Umatrix,crabs_s$Bestmatches, Cls = crabs_sex$Cls)
crabs_dbs <- DBSclustering(2,crabs_pp,crabs_s$Bestmatches,c(crabs_s$Lines,crabs_s$Columns))
plotMatrix(crabs_s$Umatrix,crabs_s$Bestmatches,Cls = crabs_dbs)
crabs_pswarm <- Pswarm(crabs_pp)
crabs_s <- GeneralizedUmatrix::GeneralizedUmatrix(crabs_pp,crabs_pswarm$ProjectedPoints)
plotMatrix(crabs_s$Umatrix,crabs_s$Bestmatches, Cls = crabs_sex$Cls)
crabs_dbs <- DBSclustering(2,crabs_pp,crabs_s$Bestmatches,c(crabs_s$Lines,crabs_s$Columns))
plotMatrix(crabs_s$Umatrix,crabs_s$Bestmatches,Cls = crabs_dbs)
library(DatabionicSwarm)
iris_pswarm <- Pswarm(iris_sl)
s <- GeneralizedUmatrix::GeneralizedUmatrix(iris_sl,iris_pswarm$ProjectedPoints)
plotMatrix(s$Umatrix,s$Bestmatches, Cls = iris_solution$Cls)
dbs <- DBSclustering(3,iris_sl,s$Bestmatches,c(s$Lines,s$Columns))
plotMatrix(s$Umatrix,s$Bestmatches,Cls = dbs)
plotMatrix(crabs_s$Umatrix,crabs_s$Bestmatches, Cls = crabs_sp$Cls)
install.packages("MLmetrics")
library(MLmetrics)
MLmetrics::ConfusionMatrix(dbs,iris_solution)
MLmetrics::ConfusionMatrix(dbs,iris_solution$Cls)
MLmetrics::ConfusionMatrix(dbs,iris_solution$Cls)
MLmetrics::ConfusionMatrix(crabs_dbs,crabs_sex$Cls)
crabs_dbs <- DBSclustering(4,crabs_pp,crabs_s$Bestmatches,c(crabs_s$Lines,crabs_s$Columns))
plotMatrix(crabs_s$Umatrix,crabs_s$Bestmatches,Cls = crabs_dbs)
crabs_pswarm <- Pswarm(crabs_pp)
crabs_s <- GeneralizedUmatrix::GeneralizedUmatrix(crabs_pp,crabs_pswarm$ProjectedPoints)
plotMatrix(crabs_s$Umatrix,crabs_s$Bestmatches, Cls = crabs_sp$Cls)
MLmetrics::ConfusionMatrix(dbs,iris_solution$Cls)
MLmetrics::ConfusionMatrix(crabs_dbs,crabs_sex$Cls)
MLmetrics::ConfusionMatrix(dbs,iris_solution$Cls)
MLmetrics::ConfusionMatrix(crabs_dbs,crabs_sex$Cls)
MLmetrics::ConfusionMatrix(crabs_dbs,crabs_sp$Cls)
crabs_dbs <- DBSclustering(2,crabs_pp,crabs_s$Bestmatches,c(crabs_s$Lines,crabs_s$Columns))
plotMatrix(crabs_s$Umatrix,crabs_s$Bestmatches,Cls = crabs_dbs)
MLmetrics::ConfusionMatrix(dbs,iris_solution$Cls)
MLmetrics::ConfusionMatrix(crabs_dbs,crabs_sex$Cls)
MLmetrics::ConfusionMatrix(crabs_dbs,crabs_sp$Cls)
library(caret)
caret::confusionMatrix(dbs,iris_solution$Cls)
caret::confusionMatrix(data = dbs, reference = iris_solution$Cls)
caret::confusionMatrix(crabs_dbs,crabs_sex$Cls)
caret::confusionMatrix(as.factor(crabs_dbs),as.factor(crabs_sex$Cls))
caret::confusionMatrix(as.factor(dbs),as.factor(iris_solution$Cls))
caret::confusionMatrix(as.factor(crabs_dbs),as.factor(crabs_sp$Cls))
caret::confusionMatrix(as.factor(crabs_dbs),as.factor(crabs_sex$Cls))
